{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Lua/",
    "result": {"data":{"cur":{"id":"c48e199e-c684-5a7d-bbda-025aa1599bd3","html":"<h1 id=\"lua-언어-정리\" style=\"position:relative;\"><a href=\"#lua-%EC%96%B8%EC%96%B4-%EC%A0%95%EB%A6%AC\" aria-label=\"lua 언어 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lua 언어 정리</h1>\n<h3 id=\"주석-처리\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%84%9D-%EC%B2%98%EB%A6%AC\" aria-label=\"주석 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주석 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 연속으로 사용한 대쉬가 있는 한 줄을 주석으로 처리한다.</span>\n\n<span class=\"token comment\">--[[\n\t--[[ 해당 문법은 개행이 되었을때 주석을 처리할 수 있다.]]</span><span class=\"token comment\">--</span>\n<span class=\"token comment\">--]]</span></code></pre></div>\n<h3 id=\"변수-처리\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%B2%98%EB%A6%AC\" aria-label=\"변수 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 처리</h3>\n<ul>\n<li>모든 수는 double 형으로 받는다.</li>\n<li>64bit double 형에는  총 52bit의 정수값을 저장할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">T <span class=\"token operator\">=</span> <span class=\"token string\">'STIRNGSTRING'</span> <span class=\"token comment\">-- Python과 동일하게 바꿀 수 없는 문자열이다.</span>\nt <span class=\"token operator\">=</span> <span class=\"token string\">\"stringstring\"</span>\n\nTt <span class=\"token operator\">=</span> <span class=\"token string\">[[ 이중으로 작성한 대괄호는\n\t\t\t\t여러 줄 문자열의 시작과 끝을 나타낸다. ]]</span>\n\nt <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span> <span class=\"token comment\">-- t는 정의되지 않은 변수를 만들며, 가비지 컬렉션 기능이 존재한다.</span></code></pre></div>\n<h3 id=\"코드-블록-표기법\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B8%94%EB%A1%9D-%ED%91%9C%EA%B8%B0%EB%B2%95\" aria-label=\"코드 블록 표기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 블록 표기법</h3>\n<ul>\n<li>블록은 do, end로 표기된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">while</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span> <span class=\"token keyword\">do</span>\n\tcount <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>  <span class=\"token comment\">-- 참고로 증감 연산자와 일반 단축 연산자 (++, +=...) 없다.</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h3 id=\"변수-및-흐름제어\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EB%B0%8F-%ED%9D%90%EB%A6%84%EC%A0%9C%EC%96%B4\" aria-label=\"변수 및 흐름제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 및 흐름제어</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">if</span> count <span class=\"token operator\">></span> <span class=\"token number\">30</span> <span class=\"token keyword\">then</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ERROR 30'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elseif</span> n <span class=\"token operator\">~=</span> <span class=\"token string\">'PULL'</span> <span class=\"token keyword\">then</span>  <span class=\"token comment\">-- '~=' 는 같지 않음을 나타낸다.</span>\n<span class=\"token comment\">-- python과 같이 같음을 확인하는 연산자는 '=='이다. '=='는 문자열에도 사용 가능</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT OVER 30\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- stdout 출력</span>\n<span class=\"token keyword\">else</span>\n\t<span class=\"token comment\">-- 변수들은 기본적으로 전역(Global) 변수로 생성된다.</span>\n\tthisIsGlobal <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">-- 변수 이름을 표기할 때는 CamelCase 표기법을 흔히 사용한다.</span>\n\t\n\t<span class=\"token comment\">-- 변수를 지역(local) 변수로 만드는 방법</span>\n\t<span class=\"token keyword\">local</span> line <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- stdin 줄을 읽는다.</span>\n\t\n\t<span class=\"token comment\">-- '..' 연산자를 사용하여 문자열 연결</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SO HAPPY,\"</span> <span class=\"token operator\">..</span> line<span class=\"token punctuation\">)</span>   <span class=\"token comment\">-- SO HAPPY + 'stdin으로 입력한 문자열' 출력</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 정의되지 않은 변수들은 nil을 리턴한다.</span>\nfoo <span class=\"token operator\">=</span> UnknownVariable   <span class=\"token comment\">-- foo에 UnknownVariable(정의되지 않은 변수)를 넣는다.</span>\n<span class=\"token comment\">-- foo = nil</span>\n\nBoolValue <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span>\n\n<span class=\"token comment\">-- 불(boolean) 연산에서는 오직 nil, false만 거짓이다. 0, \" 참이다.😀</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">if</span> count <span class=\"token operator\">></span> <span class=\"token number\">30</span> <span class=\"token keyword\">then</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ERROR 30'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elseif</span> n <span class=\"token operator\">~=</span> <span class=\"token string\">'PULL'</span> <span class=\"token keyword\">then</span>  <span class=\"token comment\">-- '~=' 는 같지 않음을 나타낸다.</span>\n<span class=\"token comment\">-- python과 같이 같음을 확인하는 연산자는 '=='이다. '=='는 문자열에도 사용 가능</span>\nio<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NOT OVER 30\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- stdout 출력</span>\n<span class=\"token keyword\">else</span>\n\t<span class=\"token comment\">-- 변수들은 기본적으로 전역(Global) 변수로 생성된다.</span>\n\tthisIsGlobal <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">-- 변수 이름을 표기할 때는 CamelCase 표기법을 흔히 사용한다.</span>\n\t\n\t<span class=\"token comment\">-- 변수를 지역(local) 변수로 만드는 방법</span>\n\t<span class=\"token keyword\">local</span> line <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- stdin 줄을 읽는다.</span>\n\t\n\t<span class=\"token comment\">-- '..' 연산자를 사용하여 문자열 연결</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SO HAPPY,\"</span> <span class=\"token operator\">..</span> line<span class=\"token punctuation\">)</span>   <span class=\"token comment\">-- SO HAPPY + 'stdin으로 입력한 문자열' 출력</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 정의되지 않은 변수들은 nil을 리턴한다.</span>\nfoo <span class=\"token operator\">=</span> UnknownVariable   <span class=\"token comment\">-- foo에 UnknownVariable(정의되지 않은 변수)를 넣는다.</span>\n<span class=\"token comment\">-- foo = nil</span>\n\nBoolValue <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span>\n\n<span class=\"token comment\">-- 불(boolean) 연산에서는 오직 nil, false만 거짓이다. 0, \" 참이다.😀</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> BoolValue <span class=\"token keyword\">then</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>\"twas <span class=\"token keyword\">false</span>'<span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 논리 연산자</span>\nans <span class=\"token operator\">=</span> BoolValue <span class=\"token keyword\">and</span> <span class=\"token string\">'yes'</span> <span class=\"token keyword\">or</span> <span class=\"token string\">'no'</span> <span class=\"token comment\">-->  'no' 삼항 연산자로 동작한다.</span>\n\nkarlSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token keyword\">do</span> <span class=\"token comment\">-- 그 범위의 양 끝을 포함한다.</span>\n\tkarlSum <span class=\"token operator\">=</span> karlSum <span class=\"token operator\">+</span> i\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- \"100, 1, -1\"를 쓰면 범위를 감소하도록 정할 수 있다.</span>\nfredSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> j <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">do</span>\n\tfredSum <span class=\"token operator\">=</span> fredSum <span class=\"token operator\">+</span> j\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- 일반적으로, 범위는 시작, 끝 [, 증가 또는 감소량] 으로 표현</span>\n\n<span class=\"token comment\">-- repat - until 루프 작성 법 C에서 do~While 유사</span>\n<span class=\"token keyword\">repeat</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NAMIN\"</span><span class=\"token punctuation\">)</span>\n\tnum <span class=\"token operator\">=</span> num <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">until</span> num <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n</code></pre></div>\n<h3 id=\"함수\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98\" aria-label=\"함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수</h3>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 피보나치 수 (재귀 버전)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token keyword\">then</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 함수 안에 정의된 함수 (Closure)와 이름 없는 함수도 쓸 수 있다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 리턴되는 함수는 adder가 호출될 때 생성된다. 그 후 x의 값을 기억한다.</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\na1 <span class=\"token operator\">=</span> <span class=\"token function\">adder</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">-- adder가 처음 호출되었으므로 a1에 9가 들어간다.</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">-- a1에는 9가 들어 있다.</span>\n\t\t\t\t\t\t\t\t<span class=\"token comment\">-- 다시 a1 인스턴스 adder를 호출하였으므로, 9 + 16 = 25가 된다.</span>\n<span class=\"token comment\">-- 리턴, 함수 호출, 할당은 모두 리스트로 동작한다. </span>\n<span class=\"token comment\">-- 리스트의 길이는 서로 다를 수 있다.</span>\n<span class=\"token comment\">-- 매치되지 않는 수신자들은 nil로 취급된다.</span>\n<span class=\"token comment\">-- 매치되지 않은 전송자들은 버려진다.</span>\n\nx<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span>\n<span class=\"token comment\">-- x = 1, y = 2, z = 3, 4는 버려진다.</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">end</span>\n\nx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NAMIN'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- \"NAMIN nil nil' 형식으로 출력된다.</span>\n<span class=\"token operator\">-</span> x <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">8</span> 이 할 당된다<span class=\"token punctuation\">.</span> 나머지 값은 버려진다<span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">-- 함수는 지역, 전역일 수 있다.</span>\n<span class=\"token comment\">-- 다음 두 줄은 같다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x <span class=\"token keyword\">end</span>\nf <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> X <span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 다음 두 줄도 같다.</span>\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">local</span> g<span class=\"token punctuation\">;</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- local g 선언은 g를 자기 참조 가능하게 만든다.</span>\n\n<span class=\"token comment\">-- 삼각 함수는 라디안으로 동작한다.</span>\n\n<span class=\"token comment\">-- 매개변수에 한 문자열만 들어갈 때는 (함수를 호출할 때) 괄호를 붙이지 않아도 된다.</span>\nprint <span class=\"token string\">'hello'</span> <span class=\"token comment\">-- 요런 형식으로</span></code></pre></div>\n<h3 id=\"테이블\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94\" aria-label=\"테이블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테이블</h3>\n<ul>\n<li>테이블은 루아의 유일한 합성 자료 구조이다.</li>\n<li>테이블은 연관 배열이다.</li>\n<li>php 배열, 자바스크립트 객체와 비슷하다.</li>\n<li>테이블은 리스트로도 사용될 수 있는 해시 참조 사전이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 테이블을 사전이나 맵으로 사용하기</span>\n<span class=\"token comment\">-- 사전은 기본적으로 문자열 키(key)를 가진다.</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>key1 <span class=\"token operator\">=</span> <span class=\"token string\">'value1'</span><span class=\"token punctuation\">,</span> key2 <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">-- 문자열 키는 자바스크립트 같은 점 표기를 쓸 수 있다.</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 'value1' 출력</span>\nt<span class=\"token punctuation\">.</span>newKey <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">-- 새로운 key/value 쌍 추가</span>\nt<span class=\"token punctuation\">.</span>key2 <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span> <span class=\"token comment\">-- 테이블 t에서 key2 제거</span>\n\n<span class=\"token comment\">-- 키로 (nil이 아닌) 임의의 표기를 사용할 수도 있다.</span>\nT <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'@!#'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'qbert'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1325</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'tau'</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">[</span><span class=\"token number\">4.23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 값 tau 출력</span>\n\n<span class=\"token comment\">-- 키 매칭은 기본적으로 숫자와 문자열 값으로 수행된다.</span>\n<span class=\"token comment\">-- 테이블은 동질성에 의해 수행된다.</span>\na <span class=\"token operator\">=</span> T<span class=\"token punctuation\">[</span><span class=\"token string\">'@!#'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">-- a = qbert</span>\nb <span class=\"token operator\">=</span> T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">-- 1325가 들어갈 것같지만 아니다. 실제로 들어가는 값은 nil이다. b = nil</span>\n<span class=\"token comment\">-- 이유는 검색에 실패하기 때문</span>\n<span class=\"token comment\">-- 검색 실패 이유는 우리가 사용한 키가 원래 값을 저장할 때 사용된 것과 같은 객체가 아니기 때문</span>\n<span class=\"token comment\">-- 그래서 더 이식성 높은 키는 문자열과 숫자열을 사용해야 한다.</span>\n\n<span class=\"token comment\">-- 매개 변수가 테이블 하나인 함수 호출에서는 괄호가 필요 없다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span>\n<span class=\"token function\">h</span><span class=\"token punctuation\">{</span>key1 <span class=\"token operator\">=</span> <span class=\"token string\">'Namin!23'</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">-- 'Namin!23' 출력</span>\n\n<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token comment\">-- 테이블 반복</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- _G는 모든 전역들 위한 특별한 테이블이다.</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>_G<span class=\"token punctuation\">[</span><span class=\"token string\">'_G'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> _G<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 'true' 출력</span>\n\n<span class=\"token comment\">-- 테이블을 리스트 또는 배열로 사용하기</span>\n<span class=\"token comment\">-- 리스트는 암묵적으로 정수형 키를 설정한다.</span>\nv <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'vaule1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value2'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'addr'</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">#</span>v <span class=\"token keyword\">do</span> <span class=\"token comment\">-- #v 는 리스트 v의 크기(size)이다.</span>\n\t<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 인덱스는 1 부터 시작</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token comment\">-- 리스트는 실제 타입이 아니다. v는 그저 하나의 테이블</span>\n<span class=\"token comment\">-- 이 테이블은 연속적인 정수 키를 가지며, 리스트로 취급된다.</span></code></pre></div>\n<h3 id=\"메타데이블과-메타메소드\" style=\"position:relative;\"><a href=\"#%EB%A9%94%ED%83%80%EB%8D%B0%EC%9D%B4%EB%B8%94%EA%B3%BC-%EB%A9%94%ED%83%80%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"메타데이블과 메타메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메타데이블과 메타메소드</h3>\n<ul>\n<li>테이블 하나는 메타테이블 하나를 가질 수 있다.</li>\n<li>그 메타테이블은 ‘연산자 오버로딩’을 제공한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">f1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">-- 분수 a/b를 표현</span>\nf2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">-- f1 + f2 실패한다. (분수에 대한 덧셈은 루아에 정의되어 있지 않다.)</span>\n\nmetafraction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> metafraction<span class=\"token punctuation\">.</span><span class=\"token function\">__add</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span>\n\tsum <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tsum<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">.</span>b <span class=\"token operator\">*</span> f2<span class=\"token punctuation\">.</span>b\n\tsum<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">*</span> f2<span class=\"token punctuation\">.</span>b <span class=\"token operator\">+</span> f2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">*</span> f1<span class=\"token punctuation\">.</span>b\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token keyword\">end</span>\n\n<span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">,</span> metafraction<span class=\"token punctuation\">)</span>\n<span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">,</span> metafraction<span class=\"token punctuation\">)</span>\n\ns <span class=\"token operator\">=</span> f1 <span class=\"token operator\">+</span> f2  <span class=\"token comment\">-- f1의 메타테이블에 있는 __add(f1, f2)를 호출한다.</span>\n\n<span class=\"token comment\">-- f1, f2는 자바스크립트의 프로토타입과 달리 메타테이블에 키가 없다.</span>\n<span class=\"token comment\">-- 반드시 그 키들을 getmetatable(f1)과 같이 다시 받아와야 한다.</span>\n<span class=\"token comment\">-- 메타테이블은 루아가 그것에 대해 아는 키를 가진 보통 테이블이다. __add 같다.</span>\n\n<span class=\"token comment\">-- 다음 문법은 실패한다. 왜냐하면 s에는 메타테이블이 없기 때문</span>\n<span class=\"token comment\">-- t = s + s</span>\n<span class=\"token comment\">-- 아래 주어진 클래스 같은 패턴들이 이 문제를 해결한다.</span>\n\n<span class=\"token comment\">-- 메터테이블에서 __index는 (myFavs.animal에 있는 점 처럼) 점 참조를 오버로드 한다.</span>\ndefaultFavs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>animal <span class=\"token operator\">=</span> <span class=\"token string\">'Namin'</span><span class=\"token punctuation\">,</span> food <span class=\"token operator\">=</span> <span class=\"token string\">'Woon'</span><span class=\"token punctuation\">}</span>\nmyFavs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>food <span class=\"token operator\">=</span> <span class=\"token string\">'apple'</span><span class=\"token punctuation\">}</span>\n<span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>myFavs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>__index <span class=\"token operator\">=</span> defaultFavs<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\neatenBy <span class=\"token operator\">=</span> myFavs<span class=\"token punctuation\">.</span>animal\n\n<span class=\"token comment\">-- 직접적 테이블 검색이 실패하면, (검색은) 그 메타테이블의 __index 값을 사용하여 다시 시도</span>\n<span class=\"token comment\">-- 계속해서 반복된다.</span>\n\n<span class=\"token comment\">-- __index 값은 사용자가 원하는 대로 맞춰진 검색을 위한 함수(테이블, 키)일 수 있다.</span>\n<span class=\"token comment\">-- (add같은) __index의 값들을 메타메소드라 불른다.</span>\n<span class=\"token comment\">-- 메타 메소드의 전체 목록이다. a 는 메타메소드를 가진 한 테이블이다.</span>\n\n<span class=\"token comment\">-- __add(a, b) --------------->  for a + b</span>\n<span class=\"token comment\">-- __sub(a, b) --------------->  for a - b</span>\n<span class=\"token comment\">-- __mul(a, b) --------------->  for a * b</span>\n<span class=\"token comment\">-- __div(a, b) --------------->  for a / b</span>\n<span class=\"token comment\">-- __mod(a, b) --------------->  for a % b</span>\n<span class=\"token comment\">-- __pow(a, b) --------------->  for a ^ b</span>\n<span class=\"token comment\">-- __unm(a)    --------------->  for -a</span>\n<span class=\"token comment\">-- __concat(a, b) ------------>  for a .. b</span>\n<span class=\"token comment\">-- __len(a)    --------------->  for #a</span>\n<span class=\"token comment\">-- __eq(a, b)  --------------->  for a == b</span>\n<span class=\"token comment\">-- __lt(a, b)  --------------->  for a &lt; b</span>\n<span class=\"token comment\">-- __le(a, b)  --------------->  for a &lt;= b</span>\n<span class=\"token comment\">-- __index(a, b) &lt;함수 또는 테이블> --------------->  for a.b</span>\n<span class=\"token comment\">-- __newindex(a, b, c) --------------->  for a.b = c</span>\n<span class=\"token comment\">-- __call(a, ...) --------------->  for a(...)</span></code></pre></div>\n<h3 id=\"클래스-와-유사한-테이블과-상속\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%99%80-%EC%9C%A0%EC%82%AC%ED%95%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EA%B3%BC-%EC%83%81%EC%86%8D\" aria-label=\"클래스 와 유사한 테이블과 상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 와 유사한 테이블과 상속</h3>\n<ul>\n<li>클래스는 (루아)에 내장되어 있지 않다.</li>\n<li>클래스는 테이블과 메타테이블을 사용하여 만들어진다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\">Dog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>                             <span class=\"token comment\">-- 1                              </span>\n\n<span class=\"token keyword\">function</span> Dog<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">-- 2      </span>\n  newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>sound <span class=\"token operator\">=</span> <span class=\"token string\">'woof'</span><span class=\"token punctuation\">}</span>          <span class=\"token comment\">-- 3  </span>\n  self<span class=\"token punctuation\">.</span>__index <span class=\"token operator\">=</span> self                <span class=\"token comment\">-- 4  </span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">setmetatable</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 5  </span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> Dog<span class=\"token punctuation\">:</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">-- 6  </span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I say '</span> <span class=\"token operator\">..</span> self<span class=\"token punctuation\">.</span>sound<span class=\"token punctuation\">)</span>      \n<span class=\"token keyword\">end</span>\n\nmrDog <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                    <span class=\"token comment\">-- 7      </span>\nmrDog<span class=\"token punctuation\">:</span><span class=\"token function\">makeSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 'I say woof'   -- 8  </span></code></pre></div>\n<ol>\n<li>Dog는 클래스처럼 동작한다. (Dog는 테이블 형식이다.)</li>\n<li>function 테이블이름:함수(…)는 function 테이블이름.함수(self,…) 동일하다.\n<ul>\n<li>‘:’은 단지 함수의 첫 인자에 self를 추가한다.</li>\n</ul>\n</li>\n<li>newObj(새 객체)는 클래스 Dog의 한 인스턴스가 된다.</li>\n<li>self = 인스턴스로 될 클래스.\n<ul>\n<li>흔히 self = Dog이다. 그러나 상속으로 그것이 바뀔 수 있다.</li>\n<li>우리가 newObj의 메타테이블과 self의 __index를 self로 설정하면, newObj는 self의 함수들을 얻는다.</li>\n</ul>\n</li>\n<li>setmetatable은 그것의 첫 인자를 리턴한다.</li>\n<li>‘:’는 2처럼 동작한다. 그러나 이번에는 self가 클래스가 아닌 인스턴스가 된다.</li>\n<li>Dog:new()는 Dog.new(Dog)와 같다. 그래서 new()에서 self=Dog이다.</li>\n<li>mrDog:makeSound()는 mrDog.makeSound(mrDog)와 같다. 여기서 self=mrDog이다.</li>\n</ol>\n<h3 id=\"모듈\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88\" aria-label=\"모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈</h3>\n<p><strong>임의의 모듈 module.lua</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> M <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testMod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Namin'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> M<span class=\"token punctuation\">.</span><span class=\"token function\">testM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Module'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">testMod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">return</span> M</code></pre></div>\n<p><strong>main section</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"lua\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- 다른 파일도 module.lua 파일에 있는 기능을 사용할 수 있다.</span>\n<span class=\"token keyword\">local</span> mod <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- module.lua 파일 실행</span>\n\n<span class=\"token comment\">-- require는 모듈을 포함(include) 하게 하는 표준 방법</span>\n<span class=\"token keyword\">local</span> mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">&lt;</span>module<span class=\"token punctuation\">.</span>lua 파일의 내용<span class=\"token operator\">></span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- module.lua는 한 함수에 들어있는 내용처럼 한 지역 변수 mod에 대입된다.</span>\n<span class=\"token comment\">-- 그래서 module.lua 안에 있는 지역 변수와 지역 함수들은 그 함수 밖에서는 보이지 않게 된다.</span>\n\n<span class=\"token comment\">-- mod는 module.lua의 반환값 M과 같다. </span>\nmod<span class=\"token punctuation\">.</span><span class=\"token function\">testM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- Module Namin 출력</span>\n<span class=\"token comment\">-- 지역 함수인 testMod은 오직 module.lua 안에서만 존재하므로 메모리에서 사라진다.</span>\nmod<span class=\"token punctuation\">.</span><span class=\"token function\">testMod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- error</span>\n\n<span class=\"token comment\">-- require의 리턴 값들은 메모리에 저장되 require가 여러 번 호출되더라도 한 파일은 한번만 실행</span>\n<span class=\"token comment\">-- 예를 들어, module2.lua가 \"print(\"BROKE\")를 포함한다면</span>\n<span class=\"token keyword\">local</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- BROKE 출력</span>\n<span class=\"token keyword\">local</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module2'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 출력 불가 a=b</span>\n\n<span class=\"token comment\">-- dofile은 require와 비슷하지만 메모리에 저장을 하지 않는다</span>\n<span class=\"token function\">dofile</span><span class=\"token punctuation\">(</span>'module2<span class=\"token punctuation\">.</span>lua<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- BROKE 출력</span>\n<span class=\"token function\">dofile</span><span class=\"token punctuation\">(</span>'module2<span class=\"token punctuation\">.</span>lua<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- BROKE 출력 (다시 출력)</span>\n\n<span class=\"token comment\">-- loadfile은 문자열을 위한 loadfile이다.</span>\ng <span class=\"token operator\">=</span> <span class=\"token function\">loadstring</span><span class=\"token punctuation\">(</span><span class=\"token string\">'print(0306)'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 한 함수를 리턴한다.</span>\n<span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 0306 출력한다. 이 함수가 호출되기 전까지는 아무것도 출력되지 않는다.</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%A3%BC%EC%84%9D-%EC%B2%98%EB%A6%AC\">주석 처리</a></li>\n<li><a href=\"#%EB%B3%80%EC%88%98-%EC%B2%98%EB%A6%AC\">변수 처리</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EB%B8%94%EB%A1%9D-%ED%91%9C%EA%B8%B0%EB%B2%95\">코드 블록 표기법</a></li>\n<li><a href=\"#%EB%B3%80%EC%88%98-%EB%B0%8F-%ED%9D%90%EB%A6%84%EC%A0%9C%EC%96%B4\">변수 및 흐름제어</a></li>\n<li><a href=\"#%ED%95%A8%EC%88%98\">함수</a></li>\n<li><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94\">테이블</a></li>\n<li><a href=\"#%EB%A9%94%ED%83%80%EB%8D%B0%EC%9D%B4%EB%B8%94%EA%B3%BC-%EB%A9%94%ED%83%80%EB%A9%94%EC%86%8C%EB%93%9C\">메타데이블과 메타메소드</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%99%80-%EC%9C%A0%EC%82%AC%ED%95%9C-%ED%85%8C%EC%9D%B4%EB%B8%94%EA%B3%BC-%EC%83%81%EC%86%8D\">클래스 와 유사한 테이블과 상속</a></li>\n<li><a href=\"#%EB%AA%A8%EB%93%88\">모듈</a></li>\n<li><a href=\"#%EC%B0%B8%EC%A1%B0-%EC%82%AC%EC%9D%B4%ED%8A%B8\">참조 사이트</a></li>\n</ul>\n</div>\n<h3 id=\"참조-사이트\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"참조 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조 사이트</h3>\n<p><a href=\"http://tylerneylon.com/a/learn-lua/\">Learn Lua in 15 Minutes</a></p>\n<p><a href=\"https://roboticist.tistory.com/576\">루아 15분 안에 배우기 (Learn Lua in 15 Minutes)</a></p>","excerpt":"Lua 언어 정리 주석 처리 변수 처리 모든 수는 double 형으로 받는다. 64bit double 형에는  총 52bit의 정수값을 저장할 수 있다. 코드 블록 표기법 블록은 do, end로 표기된다. 변수 및 흐름제어 함수 테이블 테이블은 루아의 유일한 합성 자료 구조이다. 테이블은 연관 배열이다. php 배열, 자바스크립트 객체와 비슷하다. 테이블은 리스트로도 사용될 수 있는 해시 참조 사전이다. 메타데이블과 메타메소드 테이블 하나는 메타테이블 하나를 가질 수 있다. 그 메타테이블은 ‘연산자 오버로딩’을 제공한다. 클래스 와 유사한 테이블과 상속 클래스는 (루아)에 내장되어 있지 않다. 클래스는 테이블과 메타테이블을 사용하여 만들어진다. Dog는 클래스처럼 동작한다. (Dog는 테이블 형식이다.) function 테이블이름:함수(…)는 function 테이블이름.함수(self,…) 동일하다. ‘:’은 단지 함수의 첫 인자에 self를 추가한다. newObj(새 객체)는 클래…","frontmatter":{"date":"May 29, 2020","title":"Lua 언어 정리","categories":"Language","author":"Zer0Luck","emoji":"🧤"},"fields":{"slug":"/Lua/"}},"next":null,"prev":{"id":"20fc7bd8-cb14-5f2a-95a9-bd2eee50cee4","html":"<h2 id=\"취약점\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90\" aria-label=\"취약점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약점</h2>\n<ul>\n<li>사용자에게 허용된 권한 이상의 동작이나 정보 열람을 가능하게 하는 소프트웨어의 설계상의 허점이나 결함</li>\n<li>소프트웨어, 하드웨어, 절차 및 관리 등 넓은 의미를 예기하지만 중점은 기술적 소프트웨어 결함 을 통한 취약점 발생 여부이다.</li>\n</ul>\n<h2 id=\"exploit\" style=\"position:relative;\"><a href=\"#exploit\" aria-label=\"exploit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploit</h2>\n<p>취약점이 발견되면 해당 취약점을 공격하여 원하는 코드를 실행하거나 툭정 목적을 달성하는 공격 코드 또한 공개 된다. 이런 취약점 공격 코드를 Exploit이라 부르며 이러한 공격 코드를 이용한 공격 행위 일체를 포함하기도 한다.</p>\n<h3 id=\"exploit-공개-범위\" style=\"position:relative;\"><a href=\"#exploit-%EA%B3%B5%EA%B0%9C-%EB%B2%94%EC%9C%84\" aria-label=\"exploit 공개 범위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploit 공개 범위</h3>\n<ul>\n<li>유로 Exploit</li>\n<li>무료 Exploit</li>\n<li>악의적인 Exploit (공개 X)</li>\n</ul>\n<p><a href=\"https://www.exploit-db.com/\">Offensive Security’s Exploit Database Archive</a></p>\n<h2 id=\"취약점-발견-및-패치\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EB%B0%9C%EA%B2%AC-%EB%B0%8F-%ED%8C%A8%EC%B9%98\" aria-label=\"취약점 발견 및 패치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약점 발견 및 패치</h2>\n<p>발견되는 취약점인 경우 대부분이 연구 목적으로 공개가 되어 지면서 동시에 해당 취약한 제품을 다루는 기업들은 그에 맞춰 패치가 이뤄진다. 하지만 취약점을 악의적으로 사용할 경우 공개를 하지 않고 서 군사적 일부 해킹 그룹에서 사용하여 사이버 공격으로 이용이 가능하며 또한 공개를 하기 전에 취약점을 사용하여 악의적인 행위를 한 후 공개를 하는 경우가 있는데 이러한 경우를 제로데이 공격이라 한다. 취약점에 대한 패치를 하기 전에 해당 버전에 맞게 취약점 공격을 수행하는 것을 말한다.</p>\n<h1 id=\"취약점-분류\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EB%B6%84%EB%A5%98\" aria-label=\"취약점 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약점 분류</h1>\n<h2 id=\"memory-corruption-취약점\" style=\"position:relative;\"><a href=\"#memory-corruption-%EC%B7%A8%EC%95%BD%EC%A0%90\" aria-label=\"memory corruption 취약점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Memory Corruption 취약점</h2>\n<ul>\n<li>버그로 인한 메모리 오염</li>\n<li>예상되지 않은 메모리 값 변경, 참조 등에서 발생</li>\n<li>원인 : 대부분 안전하지 않은 함수의 사용, 잘못된 함수 사용 등 프로그래밍 실수로 인해 발생</li>\n<li>대표 : BufferOverflow 취약점</li>\n</ul>\n<h3 id=\"stack-buffer-overflow\" style=\"position:relative;\"><a href=\"#stack-buffer-overflow\" aria-label=\"stack buffer overflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack Buffer Overflow</h3>\n<p>메모리 경계를 검사하지 않은 함수 사용으로 인해 스택을 덮어 쓰게 되어 발생 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 임계값 검사를 하지 않는다.</span></code></pre></div>\n<p><strong>취약 함수</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">strcpy<span class=\"token punctuation\">,</span> gets<span class=\"token punctuation\">,</span> scanf<span class=\"token punctuation\">,</span> strcat<span class=\"token punctuation\">,</span> getwd<span class=\"token punctuation\">,</span> sprintf</code></pre></div>\n<p>즉, 문자열 길이를 검사하는 함수를 사용하여 해당 취약점에 대한 기본적인 방어가 가능하겠다. 길이를 검사하는 함수를 사용해도 발생하는 경우가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nlen <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문자열 길이가 20을 넘을시 BOF 발생</span></code></pre></div>\n<p>메모리 복사, 문자열 복사함수는 반드시 정확한 검증을 거친 후에 수행하도록 한다.</p>\n<h3 id=\"heap-buffer-overflow\" style=\"position:relative;\"><a href=\"#heap-buffer-overflow\" aria-label=\"heap buffer overflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Heap Buffer Overflow</h3>\n<p>스택 버퍼 오버플러우와 비슷하나, 힙 영역에서 발생하는 점이 다르다. 또한 메모리 구조가 다르기 때문에 취약점 공격 기법도 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 경계값 검사하지 않는다.</span></code></pre></div>\n<h3 id=\"integer-overflow\" style=\"position:relative;\"><a href=\"#integer-overflow\" aria-label=\"integer overflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integer Overflow</h3>\n<p>정해진 자료형보다 큰 수를 저장할 때 발생하는 오버플로우 문제로, 조건문 등에서 정해진 분기문이 아닌 다른 분기문을 실행하도록 하여 취약점을 발생시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> maxlen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nlen <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 128 바이트 이상 입력시 음수로 인식된다.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!! MAX Size:30\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vuln!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA <span class=\"token operator\">-></span> Error<span class=\"token operator\">!</span><span class=\"token operator\">!</span> MAX Size<span class=\"token operator\">:</span><span class=\"token number\">30</span>\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<span class=\"token punctuation\">.</span><span class=\"token number\">.128</span>byte 이상 <span class=\"token operator\">-></span> Vuln<span class=\"token operator\">!</span><span class=\"token operator\">!</span></code></pre></div>\n<p><code class=\"language-text\">signed char</code> 128이상의 수를 음수로 인식하기 때문에 조건 범위를 벗어 난다.</p>\n<h3 id=\"format-string-bug\" style=\"position:relative;\"><a href=\"#format-string-bug\" aria-label=\"format string bug permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Format String Bug</h3>\n<p>포맷스트링을 지정해 주지 않고 사용할 때 발생하는 취약점 <code class=\"language-text\">%n</code>, <code class=\"language-text\">%hn</code> 등의 일부 포맷스트링을 이용하여 메모리 값을 변조하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// FSB</span></code></pre></div>\n<h3 id=\"user-after-free\" style=\"position:relative;\"><a href=\"#user-after-free\" aria-label=\"user after free permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User-After-Free</h3>\n<p>최근들어 많이 발생하는 취약점이고 특히 브라우저에서 많이 발생된다. <code class=\"language-text\">free</code>된 포인터를 사용할 때 발생한다. 자바스크립트, 파일 로딩 등으로 힙 메모리를 조작할 수 있는 상황에서 공격이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobject<span class=\"token operator\">-></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// free 되어진 포인터 사용</span></code></pre></div>\n<h3 id=\"double-free\" style=\"position:relative;\"><a href=\"#double-free\" aria-label=\"double free permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Double Free</h3>\n<p>free 된 메모리를 다시 free 할 때 발생한다. 대부분 프로그래밍 실수로 인해 발생한다. Integer Overflow 등의 취약점으로 인햐 발생하기 도 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Double Free 취약점 발생</span></code></pre></div>\n<h3 id=\"null-pointer-dereperence\" style=\"position:relative;\"><a href=\"#null-pointer-dereperence\" aria-label=\"null pointer dereperence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null Pointer Dereperence</h3>\n<p>메모리 값이 지정되지 않은 초기화되지 않은 포인터 (Null Pointer)에 값을 넣으려 할때 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token string\">'1234'</span></code></pre></div>\n<h1 id=\"exploit-분류\" style=\"position:relative;\"><a href=\"#exploit-%EB%B6%84%EB%A5%98\" aria-label=\"exploit 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exploit 분류</h1>\n<ul>\n<li>Exploit은 취약점을 공격하는 코드이다. 이러한 공격코드들으 몇 가지 기준에 따라 분류되며, 크게 원격에서 공격이 가능한 Remote Exploit과 로컬상에서 공격이 가능한 Local Exploit으로 분류된다.</li>\n</ul>\n<h3 id=\"local-exploit\" style=\"position:relative;\"><a href=\"#local-exploit\" aria-label=\"local exploit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local Exploit</h3>\n<p>로컬 PC 혹은 서버 내에서 발생하는 Exploit이다. 일반적으로 권한상승 혹은 코드 실행을 위해서 사용된다.</p>\n<ul>\n<li>인자값을 그대로 넣어서 사용하는 경우</li>\n<li>특정 파일을 통해 입력값을 전달하게 되므로 로컬상의 권한을 이미 가지고 있는 경우</li>\n</ul>\n<p>압축 프로그램, 음악 플레이어, 문서 편집 프로그램 등 수 많은 프로그램들이 검색 되는 것을 확인할 수 있겠다. 사용자에게 입력값을 받는 모든 프로그램은 취약점이 존재할 수 있다.</p>\n<h3 id=\"remote-exploit\" style=\"position:relative;\"><a href=\"#remote-exploit\" aria-label=\"remote exploit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remote Exploit</h3>\n<p>원격에서 이뤄지는 공격이다. 원격에서 패킷을 보내 공격하므로 특정 포트를 열고 서비스를 제고하는 서버 프로그램이 타겟이다.  포트가 열려있는 것만으로 원격에서 공격을 당할 수 있기 때문에 대부분의 원격 공격은 취약하다.</p>\n<p>Remote Exploit은 원격에서 직접 공격이 가능하므로 주로 서버에 접근 권한을 얻기 위한 1차 공격으로 많이 사용되며 Remote Exploit을 통해 서버의 일반 사용자 권한을 획득한 뒤, Local Exploit을 통해 추가 권한 상승을 시도하는 것이 일반적인 침투 원리이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90\">취약점</a></p>\n</li>\n<li>\n<p><a href=\"#exploit\">Exploit</a></p>\n<ul>\n<li><a href=\"#exploit-%EA%B3%B5%EA%B0%9C-%EB%B2%94%EC%9C%84\">Exploit 공개 범위</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EB%B0%9C%EA%B2%AC-%EB%B0%8F-%ED%8C%A8%EC%B9%98\">취약점 발견 및 패치</a></p>\n</li>\n<li>\n<p><a href=\"#memory-corruption-%EC%B7%A8%EC%95%BD%EC%A0%90\">Memory Corruption 취약점</a></p>\n<ul>\n<li><a href=\"#stack-buffer-overflow\">Stack Buffer Overflow</a></li>\n<li><a href=\"#heap-buffer-overflow\">Heap Buffer Overflow</a></li>\n<li><a href=\"#integer-overflow\">Integer Overflow</a></li>\n<li><a href=\"#format-string-bug\">Format String Bug</a></li>\n<li><a href=\"#user-after-free\">User-After-Free</a></li>\n<li><a href=\"#double-free\">Double Free</a></li>\n<li><a href=\"#null-pointer-dereperence\">Null Pointer Dereperence</a></li>\n<li><a href=\"#local-exploit\">Local Exploit</a></li>\n<li><a href=\"#remote-exploit\">Remote Exploit</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EC%A1%B0-%EC%82%AC%EC%9D%B4%ED%8A%B8\">참조 사이트</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"참조-사이트\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0-%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"참조 사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조 사이트</h2>\n<p><a href=\"http://exploit-db.com\">Offensive Security’s Exploit Database Archive</a></p>\n<p><a href=\"http://packetstormsecurity.com\">Packet Storm</a></p>\n<p><a href=\"http://securityfocus.com\"></a></p>","frontmatter":{"date":"June 01, 2020","title":"Exploit, 취약점 ?","categories":"Talk","author":"Zer0Luck","emoji":"⚙"},"fields":{"slug":"/vuln_exploit_talk/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/dnsdudrla97","comments":{"utterances":{"repo":"dnsdudrla97/dnsdudrla97.github.io"}}}}},"pageContext":{"slug":"/Lua/","nextSlug":"","prevSlug":"/vuln_exploit_talk/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}