{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Solana",
    "result": {"pageContext":{"currentCategory":"Solana","categories":["All","Blockchain","Solana","0-day","CLOUD","Web","projects","Talk","troubleshooting","Windows","AnalyzingBinaries","ARM","windows","1-day","CTF","Mobile","Tools","Theory","Language"],"edges":[{"node":{"id":"da7a3052-aae0-5230-a482-a1e278b6b1b2","excerpt":"Solana analysis: Program && Web3 API 3party JSON RPC connections (web3 provider) → netowkr object instance to getNodeURL ⇒ url parser @figment-solana/lib → Connection input url  ← solana-core @solana/web3.js generate key pair Ed25519 Crypto Alg use pubKey, PrivKey SOL balance (mainnet, testnet) network provider name ⇒ token name diffirent Air Drop Account Provider to Balance ⇒ Air drop Arid Drop reques PublicKey(secretkey) ⇒ pub key generate Connection.requestAirdrop(pubkey, LAMPORTS_PER_SOL) L…","fields":{"slug":"/solana-chain-Program-Web3-API/"},"frontmatter":{"categories":"Solana","title":"Solana Chain analysis Program && Web3 API","date":"August 01, 2022"}},"next":{"fields":{"slug":"/defi-wargame-5/"}},"previous":{"fields":{"slug":"/defi-wargame-6/"}}},{"node":{"id":"6c74a43d-f913-5d2e-b8c1-0ad64f03bff7","excerpt":"Transactions A client can call a program by submitting a transaction to the cluster. A single transaction can contain multiple instructions, each targeting its own program. Can contain multiple commands, each targeting its own program. When a transaction is submitted, Solana Runtime commands are processed atomically in sequence. If any part of the command fails, the entire transaction fails. Multiple commands can be bundled into a single transaction. Commands are processed atomically in order I…","fields":{"slug":"/solana-chain-transaction/"},"frontmatter":{"categories":"Solana","title":"Solana Chain analysis Transactions","date":"July 31, 2022"}},"next":{"fields":{"slug":"/solana-chain-accounts/"}},"previous":{"fields":{"slug":"/Ovice.in-XSS-unsafe-token-theft/"}}},{"node":{"id":"8692a067-813c-572a-ae5a-bf123f7c6d33","excerpt":"Account state is used to store data Essential building blocks for development in Solana Each account has a unique address The maximum size of the account is 10MB The maximum size of PDA Account is 10KB. PDA Account is used to sign on behalf of the program Account Size is fixed at creation time, but can be adjusted using realloc. Account Data Storage is paid as rent. The default account holder is the system program. Account Model 3 types of accounts Data Account (Data storage purpose) Program Ac…","fields":{"slug":"/solana-chain-accounts/"},"frontmatter":{"categories":"Solana","title":"Solana Chain analysis Accounts","date":"July 31, 2022"}},"next":{"fields":{"slug":"/solana-chain-programs/"}},"previous":{"fields":{"slug":"/solana-chain-transaction/"}}},{"node":{"id":"ce6a638f-fc43-5b44-8fcf-29693cc5223f","excerpt":"Programs Developers can write and deploy programs on the Solana blockchain. Program (referred to as Smart Contract in Ethereum Protocol) The basic role of on-chain Horadong that supports everything such as Defi, NFT, Social Media, etc. The program handles the commands of the end user and other programs All programs are stateless, all data they interact with is stored in a separate account passed through commands The program itself is stored in an account marked as executable All programs are ow…","fields":{"slug":"/solana-chain-programs/"},"frontmatter":{"categories":"Solana","title":"Solana Chain analysis Programs","date":"July 31, 2022"}},"next":{"fields":{"slug":"/solana-chain-Program-Derived-Address/"}},"previous":{"fields":{"slug":"/solana-chain-accounts/"}}},{"node":{"id":"fc4d4dd2-dc42-5b81-80e1-137c9a66d098","excerpt":"Program Derived Address PDA is the home of an account designed to be controlled by a specific program. A PDA allows a program to sign a specific address programmatically without the need for a private key. Serves as the basis for cross-program calls, which allows Solana apps to configure with each other. A 32-byte string that looks like a public key, but doesn’t have a corresponding private key Deterministically derive the PDA from findProgramAddress programID, Seed(collections of bytes). bump(…","fields":{"slug":"/solana-chain-Program-Derived-Address/"},"frontmatter":{"categories":"Solana","title":"Solana Chain analysis Program Derived Address","date":"July 31, 2022"}},"next":{"fields":{"slug":"/defi-wargame-4/"}},"previous":{"fields":{"slug":"/solana-chain-programs/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}