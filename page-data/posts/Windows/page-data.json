{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Windows",
    "result": {"pageContext":{"currentCategory":"Windows","categories":["All","Windows","windows","1-day","CTF","AnalyzingBinaries","troubleshooting","Mobile","Tools","Theory","Talk","Language"],"edges":[{"node":{"id":"4cf4f426-dd33-58b3-8144-d8b530eeb3e9","excerpt":"window NT 데이터 구조체 이며 프로세스 정보를 담고 있는 구조체 PEB 접근 방법 TEB.ProcessEnvironmentBlock 멤버가 PEB 구조체의 주소 TEB 구조체는 FS 세그먼트 셀렉터가 가리키는 세그먼트 메모리의 base address에 위치한다. 그리고 ProcessEnvironmentBlock 멤버는 TEB 구조체 시작 부터 30 옵셋만큼 떨어져 있다. method 1 바로 PEB 주소를 구하는 방법 method 2 TEB 주소를 구한후 ProcessEnvironmentBlock 멤버를 이용  FS:[0x30] 주소 값을 확인할 수 있다. PEB 구조체 정의 PEB.BeingDebugged Kernel32!IsDebuggerPresent() API 현재 프로세스가 디버깅을 당하는지를 판단해서 결과를 반환한다. API가 참조하는 정보가 바로 PEB.BeingDebugged 멤버이다. (디버깅 중이면1, 아니면 0을 반환) PEB.ImageBaseAddress…","fields":{"slug":"/window_1_theori/"},"frontmatter":{"categories":"Windows","title":"PEB (Process Environment Block)","date":"January 03, 2021"}},"next":{"fields":{"slug":"/window_2_theori/"}},"previous":null},{"node":{"id":"2e45e35c-08cd-5d0d-ae8a-ba3131d41d4d","excerpt":"SEH  는 각 Thread와 관련된  구성된다. 원칙적으로 해당 목록의 노드는 stack에 할당된다. 목록의 Head는 TEB(Thred Environment Block)의 시작 부분에 있는 포인터로 가리키므로 코드가 새 예외처리기를 추가하려는 경우 새 노드가 목록의 헤드와 포인터에 추가된다. TEB에서 새 노드를 가리키도록 변경된다. 각 노드는  유형이며 핸들러의 주소와 목록의 다음 노드에 대한 포인터를 저장한다. 이상하게도 목록의 마지막 노드의 “next pointer” 는 NULL이 아니지만  와 같다. SEH","fields":{"slug":"/window_2_theori/"},"frontmatter":{"categories":"Windows","title":"Windows SEH (Structured Exception Handler) 1","date":"January 03, 2021"}},"next":{"fields":{"slug":"/window_3_theori/"}},"previous":{"fields":{"slug":"/window_1_theori/"}}},{"node":{"id":"4164e698-1c6e-58a5-b3ee-a5374a38ba82","excerpt":"SEH (Structured Exception Handler) SEH Windows 운영체제에서 제공하는 예외처리 시스템이다.  키워드로 간단히 구현할 수 있다. 하드웨어 오류와 같은 특정 예외 코드 상황을 정상적으로 처리하기 위해 C에 대한 Microsoft 확장이다. SEH를 사용하면 실행이 예기치 않게 종료 되는 경우 메모리 블록 및 파일과 같은 리소스가 올바르게 해제 되도록 할 수 있다. SEH 매커니즘 예외 처리기 ,  예외에 응답 하거나 해제할 수 있는 블록 Termination Handlers  예외가 종료를 발생 시키는 지 여부에 관계 없이 항상 호출되는 종료 처리기 또는 블록 일반 실행의 경우 예외 처리 방법 OS는 프로세스 실행 중에 예외가 발생하면 프로세스에게 처리를 맡긴다. 프로세스 코드에 (SEH…) 예외처 리가 구현되어 있다면, 해당 예외를 잘 처리한 후 게속 실행될 것이다. 구현되어 있지 않다면 기본 예외 처리기를 동작시켜 프로세스를 종료 시킨다. 디버깅…","fields":{"slug":"/window_3_theori/"},"frontmatter":{"categories":"Windows","title":"Windows SEH (Structured Exception Handler) 0","date":"January 03, 2021"}},"next":{"fields":{"slug":"/window_4_theori/"}},"previous":{"fields":{"slug":"/window_2_theori/"}}},{"node":{"id":"221bd0db-e02b-58bb-9a44-6e40646b30e7","excerpt":"TEB (Thread Environment Block) 프로세스에서 실행되는 스레드에 대한 정보를 담고 있는 구조체 스레드별로 TEB 구조체가 하나씩 할당된다. OS 종류별로 해당 모양이 조금씩 달라진다. ProcessEnvironmentBlock member 0x30 offset 에 위치한 ProcessEnvironmentBlock member PEB(Process Environment Block) 구조체의 포인터이다. PEB는 프로세스 별로 하나만 생성된다. NtTib member TEB 구조체의 첫 번째 멤버는  구조체이다. _NT_TIB (_NT_Thread information Block) 현재 실행 중인 스레드에 대한 정보를 저장하고 있다. ExceptionList member는 _EXCEPTION_REGISTRATION_RECORD 구조체 연결 리스트를 가리키고 있다. 이것은 SEH(Structured Exception Handler) 라고 하는 Window OS의 예…","fields":{"slug":"/window_4_theori/"},"frontmatter":{"categories":"Windows","title":"TEB (Thread Environment Block)","date":"January 03, 2021"}},"next":{"fields":{"slug":"/cve_2012_0002_1-day/"}},"previous":{"fields":{"slug":"/window_3_theori/"}}},{"node":{"id":"c84a2764-f589-5841-87d8-3db17c294c1d","excerpt":"윈도우 실행 파일 구조 PE 파일 (Portable Excutable) 다양한 정보를 포함한 커다란 구조체들로 이루어져 있다. 수만은 테이블과 멤버들을 포함하고 있다. PE 파일의 종류 종류 설명 EXE 실행파일 SCR 실행파일 (화면 보호기) DLL 라이브러리 OCX 라이브러리 (ActivieX) SYS 시스템 드라이버 OBJ 오브젝트 파일 SCR 파일이 실행 파일임을 인지 하지 못한채 악성 코드로 동작하게 되어 피해가 발생한 경우가 다수 첫 바이트 부터 시작된다. PE 파일은 파일에 존재할 때의 구조와 메모리에 로드된 후의 모습이 달라진다. 파일에서는 첫 바이트부터의 거리를 offset을 사용한다. 메모리에서는 VA(Virtual Address), RVA(Relative Virtual Address, 상대적 가상 주소) 고정 주소 대신 상대 주소를 사용하는 이유는 해당 PE 파일이 메모리에 로드 될 때 한 주소에 고정적으로 로딩되는 것이 아니기 떄문이다. 메모리에 로드된 후에 …","fields":{"slug":"/windowPE_theori/"},"frontmatter":{"categories":"Windows Theory","title":"Windows PE","date":"June 02, 2020"}},"next":{"fields":{"slug":"/vuln_exploit_talk/"}},"previous":{"fields":{"slug":"/Metasploit1_theori/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}