{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/arm-6/",
    "result": {"data":{"cur":{"id":"bb13f006-b820-5125-b139-d5e5374efd82","html":"<h1 id=\"레지스터에-상수-값-로드\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0%EC%97%90-%EC%83%81%EC%88%98-%EA%B0%92-%EB%A1%9C%EB%93%9C\" aria-label=\"레지스터에 상수 값 로드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레지스터에 상수 값 로드</h1>\n<ul>\n<li>\n<p>메모리에서 데이터 로드를 수행하지 않고는 단일 명령어의 레지스터에 임의의 32비트 상수를 로드할 수 없다.</p>\n</li>\n<li>\n<p>ARM 명령어의 길이가 32 비트에 불과 하기 때문</p>\n</li>\n<li>\n<p>Thumb 명령어에는 비슷한 제한이 걸려 있다.</p>\n</li>\n<li>\n<p>데이터 로드와 함께 32 비트 값을 레지스터에 로드 할 수 있지만 일반적으로 사용되는 많은 상수를 로드하는 보다 직접적이고 효율적인 방법이 있다.</p>\n</li>\n<li>\n<p>또한 일반적으로 사용되는 많은 상수를 별도의 로드 작업 없이 데이터 처리 명령어 내에서 피연산자로 직접 포함할 수 있다.</p>\n</li>\n</ul>\n<h2 id=\"직접-로딩-mov-mvn-instruction\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EC%A0%91-%EB%A1%9C%EB%94%A9-mov-mvn-instruction\" aria-label=\"직접 로딩 mov mvn instruction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>직접 로딩 MOV, MVN Instruction</h2>\n<h3 id=\"mov-register\" style=\"position:relative;\"><a href=\"#mov-register\" aria-label=\"mov register permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MOV Register</h3>\n<ul>\n<li>MOV 명령은 모든 8 비트 상수 값을 로드 하여 0x0 ~ 0xFF (0-255) 범위를 제공한다.</li>\n<li>또한 이러한 값을 짝수로 회전 할 수 도 있다.</li>\n</ul>\n<h3 id=\"mvn-register\" style=\"position:relative;\"><a href=\"#mvn-register\" aria-label=\"mvn register permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVN Register</h3>\n<ul>\n<li>\n<p>MVN은 이러한 값의 비트 보수를 로드 할 수 있다.</p>\n</li>\n<li>\n<p>숫자 값은 <code class=\"language-text\">-(n+1)</code></p>\n</li>\n<li>\n<p>필요한 회전에 대해 계산할 필요가 없으며 어셈블러가 계산을 수행한다.</p>\n</li>\n<li>\n<p>MOV, MVN을 사용할지 결정할 필요가 없다.</p>\n</li>\n<li>\n<p>어셈블러는 적절한 것을 사용한다.</p>\n</li>\n<li>\n<p>값이 어셈블리 시간 변수 인 경우 유용하다.</p>\n</li>\n<li>\n<p>생성 할 수 없는 상수 를 사용하여 명령어를 작성하면 어셈블러에서 오류를 보고한다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">Immediate n out of range <span class=\"token keyword\">for</span> <span class=\"token keyword\">this</span> operation<span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%A7%81%EC%A0%91-%EB%A1%9C%EB%94%A9-mov-mvn-instruction\">직접 로딩 MOV, MVN Instruction</a></p>\n<ul>\n<li><a href=\"#mov-register\">MOV Register</a></li>\n<li><a href=\"#mvn-register\">MVN Register</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"레지스터에 상수 값 로드 메모리에서 데이터 로드를 수행하지 않고는 단일 명령어의 레지스터에 임의의 32비트 상수를 로드할 수 없다. ARM 명령어의 길이가 32 비트에 불과 하기 때문 Thumb 명령어에는 비슷한 제한이 걸려 있다. 데이터 로드와 함께 32 비트 값을 레지스터에 로드 할 수 있지만 일반적으로 사용되는 많은 상수를 로드하는 보다 직접적이고 효율적인 방법이 있다. 또한 일반적으로 사용되는 많은 상수를 별도의 로드 작업 없이 데이터 처리 명령어 내에서 피연산자로 직접 포함할 수 있다. 직접 로딩 MOV, MVN Instruction MOV Register MOV 명령은 모든 8 비트 상수 값을 로드 하여 0x0 ~ 0xFF (0-255) 범위를 제공한다. 또한 이러한 값을 짝수로 회전 할 수 도 있다. MVN Register MVN은 이러한 값의 비트 보수를 로드 할 수 있다. 숫자 값은  필요한 회전에 대해 계산할 필요가 없으며 어셈블러가 계산을 수행한다. MOV, M…","frontmatter":{"date":"February 10, 2021","title":"ARM Register const load","categories":"ARM","author":"Zer0Luck","emoji":"🍃"},"fields":{"slug":"/arm-6/"}},"next":{"id":"0e362dd7-cb85-5cdb-b7e0-2076cd93b9e7","html":"<h2 id=\"arm-instruction\" style=\"position:relative;\"><a href=\"#arm-instruction\" aria-label=\"arm instruction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARM Instruction</h2>\n<h3 id=\"loadstore-구조\" style=\"position:relative;\"><a href=\"#loadstore-%EA%B5%AC%EC%A1%B0\" aria-label=\"loadstore 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Load/Store 구조</h3>\n<ul>\n<li>ARM에는 메모리 내에 데이터를 직접적으로 접근하는 것이 불가능하다.</li>\n<li>LDR, STR과 같은 명령을 통해서 메모리와 레지스터 사이에 데이터를 전송한다.</li>\n</ul>\n<h3 id=\"3-address-date-processing\" style=\"position:relative;\"><a href=\"#3-address-date-processing\" aria-label=\"3 address date processing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-Address date Processing</h3>\n<ul>\n<li>두 개의 source operand, result operand</li>\n</ul>\n<h3 id=\"arm-모든-명령어는-조건부-실행-가능\" style=\"position:relative;\"><a href=\"#arm-%EB%AA%A8%EB%93%A0-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%8A%94-%EC%A1%B0%EA%B1%B4%EB%B6%80-%EC%8B%A4%ED%96%89-%EA%B0%80%EB%8A%A5\" aria-label=\"arm 모든 명령어는 조건부 실행 가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARM 모든 명령어는 조건부 실행 가능</h3>\n<ul>\n<li>모든 ARM 명령어는 CPSR의 ALU 상태 플래그 값에 대해 조건부로 실행될 수 있다.</li>\n<li>일련의 명령어가 동일한 조건에 종속 될 때 더 좋을 수 있지만 조건부 명령어를 건너 뛰기 위해 분기를 사용할 필요가 없다.</li>\n<li>데이터 처리 명령어가 이러한 플래그의 상태를 설정하는지 여부를 지정할 수 있다.</li>\n<li>한 명령어로 설정된 플래그를 사용하여 그 사이에 많은 명령어가 있더라도 다른 명령어의 실행을 제어할 수 있다.</li>\n</ul>\n<h3 id=\"register-access\" style=\"position:relative;\"><a href=\"#register-access\" aria-label=\"register access permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Register Access</h3>\n<ul>\n<li>ARM 상태에서 모든 명령어는 r0 ~ r14 에 액세스가 가능하다.</li>\n<li>대부부은 r15(pc)에 대한 액세스도 허용한다.</li>\n<li>MRS, MSR 은 이들이 정상적인 데이터 처리 연산에 의해 조작될 수 있는 범용 레지스터로 CPSR, SPSR의 콘텐츠를 이동시킬 수 있다.</li>\n</ul>\n<h3 id=\"access-to-the-inline-barrel-shifter\" style=\"position:relative;\"><a href=\"#access-to-the-inline-barrel-shifter\" aria-label=\"access to the inline barrel shifter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access to the inline barrel shifter</h3>\n<ul>\n<li>ARM 산술 논리 장치에는 시프트 및 회전 작업이 가능한 32비트 배럴 시프터가 있다.</li>\n<li>모든 ARM 데이터 처리및 단일 레지스터 데이터 전송 명령어에 대한 두 번째 피연사자는 데이터 처리 또는 데이터 전송이 명령어의 일부로 실행되기 전에 이동 될 수 있다.</li>\n<li>확장된 주소 지정</li>\n<li>상수로 곱셈</li>\n<li>상수 생성</li>\n</ul>\n<h2 id=\"thumb-명령어-집합\" style=\"position:relative;\"><a href=\"#thumb-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9\" aria-label=\"thumb 명령어 집합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thumb 명령어 집합</h2>\n<ul>\n<li>ARM 명령어 하위 집합이다.</li>\n<li>C, C++ 최적화 되어 있다.</li>\n<li>모든 Thumb 명령어는 길이가 16비트 이고 메모리에 half word로 정렬되어 저장된다.</li>\n<li>명령어 주소의 최하위 비트는 Thumb 상태에서 항상 0 이다.</li>\n<li>일부 명령어는 최하위 비트를 사용하여 분기되는 코드가 Thumb 코드인지 ARM 코드인지 확인한다.</li>\n<li>레지스터의 전체 32bit 값에서 작동</li>\n<li>데이터 액세스 및 명령어 가져오기에 전체 32비트 주소를 사용한다.</li>\n</ul>\n<h2 id=\"thumb-명령어-기능\" style=\"position:relative;\"><a href=\"#thumb-%EB%AA%85%EB%A0%B9%EC%96%B4-%EA%B8%B0%EB%8A%A5\" aria-label=\"thumb 명령어 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thumb 명령어 기능</h2>\n<h3 id=\"조건부-실행\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%B6%80-%EC%8B%A4%ED%96%89\" aria-label=\"조건부 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건부 실행</h3>\n<ul>\n<li>조건부 분기 명령어는 CPSR, ALU 상태 플래그 값에 대해 조건부로 실행할 수 있는 유일한 Thumb 명령어이다.</li>\n<li>하나 이상의 상위 레지스터가 <code class=\"language-text\">MOV</code> 또는 <code class=\"language-text\">ADD</code> 명령어의 피연산자로 지정된 경우를 제외하고 모든 데이터 처리 명령어는 이러한 플래그를 업데이트 한다.</li>\n<li>조건을 설정하는 명령어와 이에 종속된 조건 분기 사이에는 데이터 처리 명령어가 있을 수 없다.</li>\n<li>조건부로 지정하려는 명령어 위에 조건부 분기를 사용해야 한다.</li>\n</ul>\n<h3 id=\"register-access-1\" style=\"position:relative;\"><a href=\"#register-access-1\" aria-label=\"register access 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Register Access</h3>\n<ul>\n<li>Thumb 상태에서 대부분의 명령어는 r0 ~ r7에만 액세스 할 수 있으며 Low Register이라고 한다.</li>\n<li>r8 ~ r15 는 제한된 액세스 레지스터이다.</li>\n<li>Thumb 상태에서는 이를 High Register 이라 한다.</li>\n<li>예를 들어 FIQ 를 사용할 수 있다.</li>\n</ul>\n<h2 id=\"thumb-and-arm-differences\" style=\"position:relative;\"><a href=\"#thumb-and-arm-differences\" aria-label=\"thumb and arm differences permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thumb and ARM Differences</h2>\n<h3 id=\"branch-instruction\" style=\"position:relative;\"><a href=\"#branch-instruction\" aria-label=\"branch instruction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Branch Instruction</h3>\n<ul>\n<li>루프를 형성하기 위해 뒤로 분기</li>\n<li>조건부 구조에서 앞으로 분기</li>\n<li>서브 루틴으로 분기</li>\n<li>프로세서를 Thumb 상태에서 ARM 상태로 변경</li>\n</ul>\n<h3 id=\"data-processing-instructions\" style=\"position:relative;\"><a href=\"#data-processing-instructions\" aria-label=\"data processing instructions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Processing instructions</h3>\n<ul>\n<li>범용 레지지스터에서 작동한다.</li>\n<li>대부분의 경우 연산 결과는 세 번째 레지스터가 아닌 피연산자 레지스터 중 하나에 넣어야 한다.</li>\n<li>ARM 상태보다 사용 가능한 데이터 처리 작업이 적다.</li>\n<li>레지스터 r8 ~ r15에 대한 엑세스가 제한된다.</li>\n<li>CPSR의 ALU 상태 플래그는 MOV, ADD 명령어가 레지스터 r8 ~ r15에 엑세스 하는 경우를 제외하고 항상 이러한 명령어에 의해 업데이트 된다.</li>\n<li>레지스터 r8 ~ r15에 액세스 하는 Thumb 데이터 처리 명령어는 플래그를 업데이트 할 수 없다.</li>\n</ul>\n<h3 id=\"single-register-load-and-store-instruction\" style=\"position:relative;\"><a href=\"#single-register-load-and-store-instruction\" aria-label=\"single register load and store instruction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Register Load and Store Instruction</h3>\n<ul>\n<li>LDM, STM 메모리에서 로드하고 r0~r7 범위의 레지스터 서브 세트를 메모리에 저장한다.</li>\n</ul>\n<h3 id=\"multi-register-load-and-store-instruction\" style=\"position:relative;\"><a href=\"#multi-register-load-and-store-instruction\" aria-label=\"multi register load and store instruction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi Register Load and Store Instruction</h3>\n<ul>\n<li>PUSH, POP 지침은 기본으로 스택 포인터 (r13) 를 사용하여 전체 내림차순 스택을 구현한다.</li>\n<li>r0을 r7로 전송하는 것 외에도 PUSH 링크 레지스터를 저장하고 POP 하고 프로그램 카운터를 로드 할 수 있다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#arm-instruction\">ARM Instruction</a></p>\n<ul>\n<li><a href=\"#loadstore-%EA%B5%AC%EC%A1%B0\">Load/Store 구조</a></li>\n<li><a href=\"#3-address-date-processing\">3-Address date Processing</a></li>\n<li><a href=\"#arm-%EB%AA%A8%EB%93%A0-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%8A%94-%EC%A1%B0%EA%B1%B4%EB%B6%80-%EC%8B%A4%ED%96%89-%EA%B0%80%EB%8A%A5\">ARM 모든 명령어는 조건부 실행 가능</a></li>\n<li><a href=\"#register-access\">Register Access</a></li>\n<li><a href=\"#access-to-the-inline-barrel-shifter\">Access to the inline barrel shifter</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#thumb-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9\">Thumb 명령어 집합</a></p>\n</li>\n<li>\n<p><a href=\"#thumb-%EB%AA%85%EB%A0%B9%EC%96%B4-%EA%B8%B0%EB%8A%A5\">Thumb 명령어 기능</a></p>\n<ul>\n<li><a href=\"#%EC%A1%B0%EA%B1%B4%EB%B6%80-%EC%8B%A4%ED%96%89\">조건부 실행</a></li>\n<li><a href=\"#register-access-1\">Register Access</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#thumb-and-arm-differences\">Thumb and ARM Differences</a></p>\n<ul>\n<li><a href=\"#branch-instruction\">Branch Instruction</a></li>\n<li><a href=\"#data-processing-instructions\">Data Processing instructions</a></li>\n<li><a href=\"#single-register-load-and-store-instruction\">Single Register Load and Store Instruction</a></li>\n<li><a href=\"#multi-register-load-and-store-instruction\">Multi Register Load and Store Instruction</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 09, 2021","title":"ARM and THUMB Instruction","categories":"ARM","author":"Zer0Luck","emoji":"🥕"},"fields":{"slug":"/arm-4/"}},"prev":{"id":"e62d7b61-0989-52a1-8d5f-80625f86c8e8","html":"<h1 id=\"ldr-rd-const\" style=\"position:relative;\"><a href=\"#ldr-rd-const\" aria-label=\"ldr rd const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LDR Rd, =const</h1>\n<ul>\n<li><code class=\"language-text\">LDR Rd, =const</code> 의사 명령은 단일 명령어에서 32비트 숫자 상수를 생성할 수 있다.</li>\n<li>이 의사 명령어를 사용하여 MOV, MVN 명령어 범위를 벗어난 상수를 생성한다.</li>\n</ul>\n<h3 id=\"ldr-의사명령은-특정-상수에-대해-가장-효율적인-코드를-생성한다\" style=\"position:relative;\"><a href=\"#ldr-%EC%9D%98%EC%82%AC%EB%AA%85%EB%A0%B9%EC%9D%80-%ED%8A%B9%EC%A0%95-%EC%83%81%EC%88%98%EC%97%90-%EB%8C%80%ED%95%B4-%EA%B0%80%EC%9E%A5-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%9C%EB%8B%A4\" aria-label=\"ldr 의사명령은 특정 상수에 대해 가장 효율적인 코드를 생성한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LDR 의사명령은 특정 상수에 대해 가장 효율적인 코드를 생성한다.</h3>\n<ul>\n<li>MOV, MVN 명령어를 사용하여 상수를 생성 할 수 있는 경우 어셈블러는 적절한 명령어를 생성한다.</li>\n<li>MOV, MVN 명령어로 상수를 생성할 수 없는 경우 어셈블러는 다음을 수행한다.\n<ul>\n<li>값을 literal pool (상수 값을 유지하기 위해 코드에 포함된 메모리의 일부에 배치한다.)</li>\n<li>Literal pool에서 상수를 읽는 프로그램 기준 주소로 LDR 명령어를 생성한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">LDR      rn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>pc<span class=\"token punctuation\">,</span> #offset to literal pool<span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">;</span> load <span class=\"token keyword\">register</span> n with one word\n                                                <span class=\"token punctuation\">;</span> from the address <span class=\"token punctuation\">[</span>pc <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>어셈블러에서 생성한 LDR 명령어 범위 내에 리터럴 풀이 있는지 확인해야 한다.</li>\n</ul>\n<h3 id=\"literal-pools-배치\" style=\"position:relative;\"><a href=\"#literal-pools-%EB%B0%B0%EC%B9%98\" aria-label=\"literal pools 배치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Literal pools 배치</h3>\n<ul>\n<li>어셈블러는 각 섹션의 끝에 리터럴 풀을 배치한다.</li>\n<li>이들은 다음 섹션의 시작 부분에 있는 AREA instruction  또는 어셈블리 끝에 있는 END instruction 의해 정의된다.</li>\n<li>포함된 파일 끝에 있는 END는 섹션의 끝을 알리지 않는다.</li>\n<li>큰 섹션에서 기본 리터럴 풀은 하나 이상의 LDR 명령어 범위를 벗어날 수 있다.</li>\n<li>PC에서 상수까지의 오프셋은 다음과 같다.\n<ul>\n<li>ARM 상태에서 4KB 미만이지만 어느 방향으로 가능</li>\n<li>Thumb 상태에서 앞으로 1KB 미만</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ldr-rd--const-의사-명령어에서-상수를-리터럴-풀에-배치해야-하는-경우-어셈블러는-다음과-같다\" style=\"position:relative;\"><a href=\"#ldr-rd--const-%EC%9D%98%EC%82%AC-%EB%AA%85%EB%A0%B9%EC%96%B4%EC%97%90%EC%84%9C-%EC%83%81%EC%88%98%EB%A5%BC-%EB%A6%AC%ED%84%B0%EB%9F%B4-%ED%92%80%EC%97%90-%EB%B0%B0%EC%B9%98%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0-%EC%96%B4%EC%85%88%EB%B8%94%EB%9F%AC%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EB%8B%A4\" aria-label=\"ldr rd  const 의사 명령어에서 상수를 리터럴 풀에 배치해야 하는 경우 어셈블러는 다음과 같다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LDR Rd, = const 의사 명령어에서 상수를 리터럴 풀에 배치해야 하는 경우 어셈블러는 다음과 같다.</h3>\n<ul>\n<li>상수를 사용할 수 있고 이전 리터럴 풀에서 주소를 지정할 수 있는지 확인하며 기존 상수를 처리한다.</li>\n<li>상수를 아직 사용할 수 없는 경우 next literal pool에 배치하려고 한다.</li>\n</ul>\n<h3 id=\"next-literal-pool\" style=\"position:relative;\"><a href=\"#next-literal-pool\" aria-label=\"next literal pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next literal pool</h3>\n<ul>\n<li>범위를 벗어난 경우 어셈블러는 오류 메시지를 생성한다.</li>\n<li>해당 경우 LTORG instruction을 사용하여 코드에 추가 리터럴 풀을 배치해야 한다.</li>\n<li>LTORG는 실패한 LDR 의사 명령어 뒤에 4KB(ARM) 또는 1KB (Thumb) 내에 배치한다.</li>\n</ul>\n<h3 id=\"ltorg-instruction\" style=\"position:relative;\"><a href=\"#ltorg-instruction\" aria-label=\"ltorg instruction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LTORG Instruction</h3>\n<ul>\n<li>어셈블러는 모든 코드 섹션의 끝에 현재 리터럴 풀을 어셈블한다.</li>\n<li>코드 섹션 끝은 AREA 다음 섹션의 시작 부분 또는 어셈블리의 끝 부분에 있는 지시문에 의해 결정된다.</li>\n<li>이러한 기본 리터럴 풀은 때때로 일부의 범위를 벗어날 수 있다. LDR, LDFD, LDFS 의사 명령어</li>\n<li>LTORG 리터럴 풀이 범위 내에서 어셈블되었는지 확인한다.</li>\n</ul>\n<h3 id=\"프로세서가-명령으로-실행을-시도하지-않는-곳에-리터럴-풀을-배치해야-한다\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C%EA%B0%80-%EB%AA%85%EB%A0%B9%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89%EC%9D%84-%EC%8B%9C%EB%8F%84%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B3%B3%EC%97%90-%EB%A6%AC%ED%84%B0%EB%9F%B4-%ED%92%80%EC%9D%84-%EB%B0%B0%EC%B9%98%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"프로세서가 명령으로 실행을 시도하지 않는 곳에 리터럴 풀을 배치해야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세서가 명령으로 실행을 시도하지 않는 곳에 리터럴 풀을 배치해야 한다.</h3>\n<ul>\n<li>무조건 분기 명령어 뒤에 배치하거나 서브 루틴 끝에 반환 명령어 뒤에 배치한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">AREA     Loadcon<span class=\"token punctuation\">,</span> CODE<span class=\"token punctuation\">,</span> READONLY\n        ENTRY                              \nstart   BL       func1                     <span class=\"token punctuation\">;</span> Branch 첫 번째 서브루틴\n        BL       func2                     <span class=\"token punctuation\">;</span> Branch 두 번째 서브루틴\nstop    MOV      r0<span class=\"token punctuation\">,</span> #<span class=\"token number\">0x18</span>                 <span class=\"token punctuation\">;</span> angel_SWIreason_ReportException\n        LDR      r1<span class=\"token punctuation\">,</span> <span class=\"token operator\">=</span><span class=\"token number\">0x20026</span>              <span class=\"token punctuation\">;</span> ADP_Stopped_ApplicationExit\n        SWI      <span class=\"token number\">0x123456</span>                  <span class=\"token punctuation\">;</span> ARM semihosting SWI\nfunc1\n        LDR      r0<span class=\"token punctuation\">,</span> <span class=\"token operator\">=</span><span class=\"token number\">42</span>                   <span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> MOV R0<span class=\"token punctuation\">,</span> #<span class=\"token number\">42</span>\n        LDR      r1<span class=\"token punctuation\">,</span> <span class=\"token operator\">=</span><span class=\"token number\">0x55555555</span>           <span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> LDR R1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">,</span> #offset to\n                                           <span class=\"token punctuation\">;</span> Literal Pool <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        LDR      r2<span class=\"token punctuation\">,</span> <span class=\"token operator\">=</span><span class=\"token number\">0xFFFFFFFF</span>           <span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> MVN R2<span class=\"token punctuation\">,</span> #<span class=\"token number\">0</span>\n        MOV      pc<span class=\"token punctuation\">,</span> lr\n        LTORG                              <span class=\"token punctuation\">;</span> Literal Pool <span class=\"token number\">1</span> contains\n                                           <span class=\"token punctuation\">;</span> literal Ox55555555\nfunc2\n        LDR      r3<span class=\"token punctuation\">,</span> <span class=\"token operator\">=</span><span class=\"token number\">0x55555555</span>           <span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> LDR R3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>PC<span class=\"token punctuation\">,</span> #offset to\n                                           <span class=\"token punctuation\">;</span> Literal Pool <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">;</span> LDR r4<span class=\"token punctuation\">,</span> <span class=\"token operator\">=</span><span class=\"token number\">0x66666666</span>              <span class=\"token punctuation\">;</span> 만약에 주석 처리가 아니라면\n                                           <span class=\"token punctuation\">;</span> 실패한다<span class=\"token punctuation\">.</span> 왜냐하면 두 개의 리터럴 풀이기 때문\n                                           <span class=\"token punctuation\">;</span> 범위에 벗어난다<span class=\"token punctuation\">.</span>\n        MOV      pc<span class=\"token punctuation\">,</span> lr\nLargeTable\n        SPACE    <span class=\"token number\">4200</span>                      <span class=\"token punctuation\">;</span> Starting at the current location<span class=\"token punctuation\">,</span>\n                                           <span class=\"token punctuation\">;</span> clears a <span class=\"token number\">4200</span> byte area of memory\n                                           <span class=\"token punctuation\">;</span> to zero\n        END                                <span class=\"token punctuation\">;</span> Literal Pool <span class=\"token number\">2</span> is empty</code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#ldr-%EC%9D%98%EC%82%AC%EB%AA%85%EB%A0%B9%EC%9D%80-%ED%8A%B9%EC%A0%95-%EC%83%81%EC%88%98%EC%97%90-%EB%8C%80%ED%95%B4-%EA%B0%80%EC%9E%A5-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%9C%EB%8B%A4\">LDR 의사명령은 특정 상수에 대해 가장 효율적인 코드를 생성한다.</a></li>\n<li><a href=\"#literal-pools-%EB%B0%B0%EC%B9%98\">Literal pools 배치</a></li>\n<li><a href=\"#ldr-rd--const-%EC%9D%98%EC%82%AC-%EB%AA%85%EB%A0%B9%EC%96%B4%EC%97%90%EC%84%9C-%EC%83%81%EC%88%98%EB%A5%BC-%EB%A6%AC%ED%84%B0%EB%9F%B4-%ED%92%80%EC%97%90-%EB%B0%B0%EC%B9%98%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0-%EC%96%B4%EC%85%88%EB%B8%94%EB%9F%AC%EB%8A%94-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EB%8B%A4\">LDR Rd, = const 의사 명령어에서 상수를 리터럴 풀에 배치해야 하는 경우 어셈블러는 다음과 같다.</a></li>\n<li><a href=\"#next-literal-pool\">next literal pool</a></li>\n<li><a href=\"#ltorg-instruction\">LTORG Instruction</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C%EA%B0%80-%EB%AA%85%EB%A0%B9%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89%EC%9D%84-%EC%8B%9C%EB%8F%84%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B3%B3%EC%97%90-%EB%A6%AC%ED%84%B0%EB%9F%B4-%ED%92%80%EC%9D%84-%EB%B0%B0%EC%B9%98%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\">프로세서가 명령으로 실행을 시도하지 않는 곳에 리터럴 풀을 배치해야 한다.</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 10, 2021","title":"ARM LDR Rd, =const (constant)","categories":"ARM","author":"Zer0Luck","emoji":"🥑"},"fields":{"slug":"/arm-8/"}},"site":{"siteMetadata":{"siteUrl":"https://zer0luck.kr","comments":{"utterances":{"repo":"dnsdudrla97/dnsdudrla97.github.io"}}}}},"pageContext":{"slug":"/arm-6/","nextSlug":"/arm-4/","prevSlug":"/arm-8/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}